version: '3.1'

services:

#  gateway:
#    build:
#      context: gateway
#      dockerfile: Dockerfile
#    image: gateway:latest
#    ports:
#      - "8888:8888"
#    restart: always
#
  user:
    build:
      context: user
      dockerfile: Dockerfile
    image: user:latest
    depends_on:
      - user-db
    ports:
      - "8100:8100"
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  billing:
    build:
      context: billing
      dockerfile: Dockerfile
    image: billing:latest
    depends_on:
      - billing-db
    ports:
      - "8200:8200"
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://billing-db:5432/billing
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#
#  order:
#    build:
#      context: order
#      dockerfile: Dockerfile
#    image: order:latest
#    depends_on:
#      - order-db
#    ports:
#      - "8300:8300"
#    restart: always
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#
#  notification:
#    build:
#      context: notification
#      dockerfile: Dockerfile
#    image: notification:latest
#    depends_on:
#      - notification-db
#    ports:
#      - "8400:8400"
#    restart: always
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://notification-db:5432/notification
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#

  user-db:
    image: postgres:14.2
    restart: always
    volumes:
      - ./container-data/user-data:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  billing-db:
    image: postgres:14.2
    restart: always
    volumes:
      - ./container-data/billing-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: billing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

#  order-db:
#    image: postgres:14.2
#    restart: always
#    volumes:
#      - ./container-data/order-data:/var/lib/postgresql/data
#    ports:
#      - "5433:5432"
#    environment:
#      POSTGRES_DB: order
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#    command:
#      - "postgres"
#      - "-c"
#      - "wal_level=logical"
#
#  notification-db:
#    image: postgres:14.2
#    restart: always
#    volumes:
#      - ./container-data/notification-data:/var/lib/postgresql/data
#    ports:
#      - "5434:5432"
#    environment:
#      POSTGRES_DB: notification
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#    command:
#      - "postgres"
#      - "-c"
#      - "wal_level=logical"

  portainer:
    image: portainer/portainer-ce:2.11.1-alpine
    volumes:
      - ./container-data/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9000:9000"

  zookeeper:
    image: quay.io/debezium/zookeeper:1.9
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"

  kafka:
    image: quay.io/debezium/kafka:1.9
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181

  connect:
    image: quay.io/debezium/connect:1.9
    ports:
      - "8083:8083"
    links:
      - kafka
      - user-db
      - billing-db
#      - order-db
#      - notification-db
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses

